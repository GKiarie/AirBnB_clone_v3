<!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.NoResultFound: No row was found when one was required
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MjQ2YGuWfIXHguMpIlKQ";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NoResultFound</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.NoResultFound: No row was found when one was required
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-140512516165920">
  <h4>File <cite class="filename">"/home/eriq/.local/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">2551</em>,
      in <code class="function">__call__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-140512516168048">
  <h4>File <cite class="filename">"/home/eriq/.local/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">2531</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140512516167712">
  <h4>File <cite class="filename">"/home/eriq/.local/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">2528</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140512516166368">
  <h4>File <cite class="filename">"/home/eriq/.local/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1825</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>
</div>

<li><div class="frame" id="frame-140512516168272">
  <h4>File <cite class="filename">"/home/eriq/.local/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1823</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-140512516168384">
  <h4>File <cite class="filename">"/home/eriq/.local/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1799</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140512516168832">
  <h4>File <cite class="filename">"/home/eriq/alx-projects/AirBnB_clone_v3/api/v1/views/states.py"</cite>,
      line <em class="line">31</em>,
      in <code class="function">get_all_states</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line before"><span class="ws">                </span>obj = State(**my_dict)</pre>
<pre class="line before"><span class="ws">                </span>obj.save()</pre>
<pre class="line before"><span class="ws">                </span>return jsonify(obj.to_dict()), 201</pre>
<pre class="line before"><span class="ws">    </span>else:</pre>
<pre class="line current"><span class="ws">        </span>obj = storage.get(State, state_id)</pre>
<pre class="line after"><span class="ws">        </span>if not obj:</pre>
<pre class="line after"><span class="ws">            </span>abort(404)</pre>
<pre class="line after"><span class="ws">        </span>if request.method == &#34;GET&#34;:</pre>
<pre class="line after"><span class="ws">            </span>return jsonify(storage.get(State, state_id).to_dict()), 200</pre>
<pre class="line after"><span class="ws">        </span>elif request.method == &#34;PUT&#34;:</pre></div>
</div>

<li><div class="frame" id="frame-140512516165808">
  <h4>File <cite class="filename">"/home/eriq/alx-projects/AirBnB_clone_v3/models/engine/db_storage.py"</cite>,
      line <em class="line">60</em>,
      in <code class="function">get</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;add the object to the current database session&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>self.__session.add(obj)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def get(self, cls, id):</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;method to retrieve one object&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>obj = self.__session.query(cls).filter(cls.id == id).one()</pre>
<pre class="line after"><span class="ws">        </span>return (obj)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def count(self, cls=None):</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;method to count the number of objects in storage&#34;&#34;&#34;</pre>
<pre class="line after"><span class="ws">        </span>return len(self.all(cls))</pre></div>
</div>

<li><div class="frame" id="frame-140512516166144">
  <h4>File <cite class="filename">"/usr/local/lib/python3.8/dist-packages/sqlalchemy/orm/query.py"</cite>,
      line <em class="line">2793</em>,
      in <code class="function">one</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.one` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalar_one` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().one()  # type: ignore</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def scalar(self) -&gt; Any:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Return the first element of the first result or None</pre>
<pre class="line after"><span class="ws">        </span>if no rows present.  If multiple rows are returned,</pre>
<pre class="line after"><span class="ws">        </span>raises MultipleResultsFound.</pre></div>
</div>

<li><div class="frame" id="frame-140512516168160">
  <h4>File <cite class="filename">"/usr/local/lib/python3.8/dist-packages/sqlalchemy/engine/result.py"</cite>,
      line <em class="line">1797</em>,
      in <code class="function">one</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>Equivalent to :meth:`_engine.Result.one` except that</pre>
<pre class="line before"><span class="ws">        </span>scalar values, rather than :class:`_engine.Row` objects,</pre>
<pre class="line before"><span class="ws">        </span>are returned.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._only_one_row(</pre>
<pre class="line after"><span class="ws">            </span>raise_for_second_row=True, raise_for_none=True, scalar=False</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class TupleResult(FilterResult[_R], util.TypingOnly):</pre></div>
</div>

<li><div class="frame" id="frame-140512516167040">
  <h4>File <cite class="filename">"/usr/local/lib/python3.8/dist-packages/sqlalchemy/engine/result.py"</cite>,
      line <em class="line">735</em>,
      in <code class="function">_only_one_row</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>onerow = self._fetchone_impl</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>row: Optional[_InterimRowType[Any]] = onerow(hard_close=True)</pre>
<pre class="line before"><span class="ws">        </span>if row is None:</pre>
<pre class="line before"><span class="ws">            </span>if raise_for_none:</pre>
<pre class="line current"><span class="ws">                </span>raise exc.NoResultFound(</pre>
<pre class="line after"><span class="ws">                    </span>&#34;No row was found when one was required&#34;</pre>
<pre class="line after"><span class="ws">                </span>)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>return None</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.NoResultFound: No row was found when one was required
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/home/eriq/.local/lib/python3.8/site-packages/flask/app.py&#34;, line 2551, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/home/eriq/.local/lib/python3.8/site-packages/flask/app.py&#34;, line 2531, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/home/eriq/.local/lib/python3.8/site-packages/flask/app.py&#34;, line 2528, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/home/eriq/.local/lib/python3.8/site-packages/flask/app.py&#34;, line 1825, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/home/eriq/.local/lib/python3.8/site-packages/flask/app.py&#34;, line 1823, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/home/eriq/.local/lib/python3.8/site-packages/flask/app.py&#34;, line 1799, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
  File &#34;/home/eriq/alx-projects/AirBnB_clone_v3/api/v1/views/states.py&#34;, line 31, in get_all_states
    obj = storage.get(State, state_id)
  File &#34;/home/eriq/alx-projects/AirBnB_clone_v3/models/engine/db_storage.py&#34;, line 60, in get
    obj = self.__session.query(cls).filter(cls.id == id).one()
  File &#34;/usr/local/lib/python3.8/dist-packages/sqlalchemy/orm/query.py&#34;, line 2793, in one
    return self._iter().one()  # type: ignore
  File &#34;/usr/local/lib/python3.8/dist-packages/sqlalchemy/engine/result.py&#34;, line 1797, in one
    return self._only_one_row(
  File &#34;/usr/local/lib/python3.8/dist-packages/sqlalchemy/engine/result.py&#34;, line 735, in _only_one_row
    raise exc.NoResultFound(
sqlalchemy.exc.NoResultFound: No row was found when one was required
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/eriq/.local/lib/python3.8/site-packages/flask/app.py", line 2551, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/eriq/.local/lib/python3.8/site-packages/flask/app.py", line 2531, in wsgi_app
    response = self.handle_exception(e)
  File "/home/eriq/.local/lib/python3.8/site-packages/flask/app.py", line 2528, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/eriq/.local/lib/python3.8/site-packages/flask/app.py", line 1825, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/eriq/.local/lib/python3.8/site-packages/flask/app.py", line 1823, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/eriq/.local/lib/python3.8/site-packages/flask/app.py", line 1799, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
  File "/home/eriq/alx-projects/AirBnB_clone_v3/api/v1/views/states.py", line 31, in get_all_states
    obj = storage.get(State, state_id)
  File "/home/eriq/alx-projects/AirBnB_clone_v3/models/engine/db_storage.py", line 60, in get
    obj = self.__session.query(cls).filter(cls.id == id).one()
  File "/usr/local/lib/python3.8/dist-packages/sqlalchemy/orm/query.py", line 2793, in one
    return self._iter().one()  # type: ignore
  File "/usr/local/lib/python3.8/dist-packages/sqlalchemy/engine/result.py", line 1797, in one
    return self._only_one_row(
  File "/usr/local/lib/python3.8/dist-packages/sqlalchemy/engine/result.py", line 735, in _only_one_row
    raise exc.NoResultFound(
sqlalchemy.exc.NoResultFound: No row was found when one was required


-->
